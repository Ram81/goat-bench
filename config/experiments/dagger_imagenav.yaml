# @package _global_

defaults:
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat_baselines/rl/policy/obs_transforms:
    - resize
    - relabel_image_goal
    - relabel_teacher_actions
  - imagenav_stretch_hm3d
  - override /habitat/task/lab_sensors:
    - image_goal_rotation_sensor
    - compass_sensor
    - gps_sensor
    - objnav_explorer
  - override /habitat/task/measurements:
    - distance_to_goal
    - success
    - spl
    - angle_to_goal
    - angle_success
    - imagenav_reward
    - frontier_exploration_map
  - _self_

habitat:
  task:
    success_reward: 2.5
    slack_reward: -1e-3

    reward_measure: "imagenav_reward"
    success_measure: "success"

    measurements:
      success:
        success_distance: 1.0

    lab_sensors:
      objnav_explorer:
        map_resolution: 128
  dataset:
    split: train_single_story
  simulator:
    navmesh_settings:
      agent_max_climb: 0.20
      cell_height: 0.20

habitat_baselines:
  verbose: False
  trainer_name: "ver_dagger"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  num_environments: 32
  checkpoint_folder: "data/new_checkpoints"
  num_updates: -1
  total_num_steps: 1e9
  log_interval: 20
  num_checkpoints: 400
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True

  rl:

    policy:
      name: "PointNavResNetCLIPPolicy"
      obs_transforms:
        relabel_teacher_actions:
          teacher_label: "objnav_explorer"

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 1
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 64
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False
    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: False
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet50_clip_avgattnpool
      rnn_type: LSTM
      num_recurrent_layers: 2
